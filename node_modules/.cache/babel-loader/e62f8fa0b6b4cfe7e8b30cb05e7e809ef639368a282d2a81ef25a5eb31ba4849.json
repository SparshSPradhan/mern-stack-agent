{"ast":null,"code":"import { create } from \"zustand\";\nimport axios from \"../utils/axios\";\nexport const useStore = create(set => ({\n  agents: [],\n  tasks: [],\n  fetchAgents: async token => {\n    if (!token) return; // ✅ Prevent API call if not logged in\n\n    try {\n      const {\n        data\n      } = await axios.get(\"/agent/all\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      set({\n        agents: data\n      });\n    } catch (error) {\n      console.error(\"Error fetching agents:\", error);\n    }\n  },\n  fetchTasks: async (agentId, token) => {\n    if (!token) return;\n    try {\n      const {\n        data\n      } = await axios.get(`/task/${agentId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      set({\n        tasks: data\n      });\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  },\n  uploadFile: async (file, token) => {\n    if (!token) return;\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      await axios.post(\"/upload\", formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\",\n          \"Accept\": \"application/json\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Error uploading task files:\", error);\n    }\n  },\n  addAgent: async (name, email, mobileNumber, password, token) => {\n    try {\n      const response = await axios.post(\"/agent/register\", {\n        name,\n        email,\n        mobileNumber,\n        password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      set(state => ({\n        agents: [...state.agents, response.data]\n      }));\n    } catch (error) {\n      console.error(\"Error adding agent:\", error);\n    }\n  }\n}));","map":{"version":3,"names":["create","axios","useStore","set","agents","tasks","fetchAgents","token","data","get","headers","Authorization","Accept","error","console","fetchTasks","agentId","uploadFile","file","formData","FormData","append","post","addAgent","name","email","mobileNumber","password","response","state"],"sources":["/Users/sparshs.pradhan/Downloads/mern-stack-agent-pro-main/client/src/store/agentTaskUploadStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport axios from \"../utils/axios\";\n\ninterface Agent {\n  _id: string;\n  name: string;\n  email: string;\n  mobileNumber: string;\n}\n\ninterface Task {\n  _id: string;\n  firstName: string;\n  phone: string;\n  notes: string;\n  assignedTo: string;\n}\n\ninterface StoreState {\n  agents: Agent[];\n  tasks: Task[];\n  fetchAgents: (token: string) => Promise<void>;\n  fetchTasks: (agentId: string, token: string) => Promise<void>;\n  uploadFile: (file: File, token: string) => Promise<void>;\n  addAgent: (name: string, email: string, mobileNumber: string, password: string,token: string) => Promise<void>;\n}\n\nexport const useStore = create<StoreState>((set) => ({\n  agents: [],\n  tasks: [],\n  fetchAgents: async (token) => {\n    if (!token) return;  // ✅ Prevent API call if not logged in\n\n    try {\n      const { data } = await axios.get(\"/agent/all\", {\n        headers: { \n            Authorization: `Bearer ${token}`,\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n      });\n      set({ agents: data });\n    } catch (error) {\n      console.error(\"Error fetching agents:\", error);\n    }\n  },\n  fetchTasks: async (agentId, token) => {\n    if (!token) return;\n\n    try {\n      const { data } = await axios.get(`/task/${agentId}`, {\n        headers: { \n            Authorization: `Bearer ${token}`,\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n         },\n      });\n      set({ tasks: data });\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  },\n  uploadFile: async (file, token) => {\n    if (!token) return;\n    try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        await axios.post(\"/upload\", formData, {\n            headers: { \n                Authorization: `Bearer ${token}`,\n                \"Content-Type\": \"multipart/form-data\",\n                \"Accept\": \"application/json\",\n             },\n        });\n    } catch (error) {\n        console.error(\"Error uploading task files:\", error);\n    }\n  },\n  addAgent: async (name, email, mobileNumber,password, token) => {\n    try {\n      const response = await axios.post(\n        \"/agent/register\",\n        { name, email, mobileNumber, password},\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      set((state) => ({ agents: [...state.agents, response.data] }));\n    } catch (error) {\n      console.error(\"Error adding agent:\", error);\n    }\n  },\n}));\n\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,gBAAgB;AA0BlC,OAAO,MAAMC,QAAQ,GAAGF,MAAM,CAAcG,GAAG,KAAM;EACnDC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,MAAOC,KAAK,IAAK;IAC5B,IAAI,CAACA,KAAK,EAAE,OAAO,CAAE;;IAErB,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,YAAY,EAAE;QAC7CC,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUJ,KAAK,EAAE;UAChCK,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE;QACpB;MACF,CAAC,CAAC;MACFT,GAAG,CAAC;QAAEC,MAAM,EAAEI;MAAK,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EACDE,UAAU,EAAE,MAAAA,CAAOC,OAAO,EAAET,KAAK,KAAK;IACpC,IAAI,CAACA,KAAK,EAAE;IAEZ,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,SAASO,OAAO,EAAE,EAAE;QACnDN,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUJ,KAAK,EAAE;UAChCK,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE;QACnB;MACH,CAAC,CAAC;MACFT,GAAG,CAAC;QAAEE,KAAK,EAAEG;MAAK,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EACDI,UAAU,EAAE,MAAAA,CAAOC,IAAI,EAAEX,KAAK,KAAK;IACjC,IAAI,CAACA,KAAK,EAAE;IACZ,IAAI;MACA,MAAMY,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;MAC7B,MAAMjB,KAAK,CAACqB,IAAI,CAAC,SAAS,EAAEH,QAAQ,EAAE;QAClCT,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUJ,KAAK,EAAE;UAChC,cAAc,EAAE,qBAAqB;UACrC,QAAQ,EAAE;QACb;MACL,CAAC,CAAC;IACN,CAAC,CAAC,OAAOM,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EACDU,QAAQ,EAAE,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,YAAY,EAACC,QAAQ,EAAEpB,KAAK,KAAK;IAC7D,IAAI;MACF,MAAMqB,QAAQ,GAAG,MAAM3B,KAAK,CAACqB,IAAI,CAC/B,iBAAiB,EACjB;QAAEE,IAAI;QAAEC,KAAK;QAAEC,YAAY;QAAEC;MAAQ,CAAC,EACtC;QACEjB,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUJ,KAAK;QAChC;MACF,CACF,CAAC;MACDJ,GAAG,CAAE0B,KAAK,KAAM;QAAEzB,MAAM,EAAE,CAAC,GAAGyB,KAAK,CAACzB,MAAM,EAAEwB,QAAQ,CAACpB,IAAI;MAAE,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}